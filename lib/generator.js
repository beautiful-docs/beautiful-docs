// Generated by CoffeeScript 1.9.0
(function() {
  var Generator, S, async, coffee, eco, fs, less, path, util, yaml, _;

  eco = require('eco');

  path = require('path');

  fs = require('fs');

  util = require('util');

  _ = require('underscore');

  less = require('less');

  coffee = require('coffee-script');

  async = require('async');

  S = require('string');

  yaml = require('js-yaml');

  Generator = (function() {
    function Generator(options) {
      this.options = _.extend({
        theme: 'default',
        compileThemeFiles: true,
        templates: {
          layout: '_layout.html',
          page: '_page.html',
          manifests: '_manifests.html'
        },
        defaultCategory: "All projects",
        baseUrl: ''
      }, options);
      if (this.options.baseUrl !== '') {
        this.options.baseUrl = S(this.options.baseUrl).ensureRight('/').s;
      }
    }

    Generator.prototype.getThemeFilename = function(filename, callback) {
      return fs.exists(this.options.theme, (function(_this) {
        return function(exists) {
          if (exists) {
            filename = path.join(_this.options.theme, filename);
          } else {
            filename = path.join(__dirname, "themes", _this.options.theme, filename);
          }
          return fs.exists(filename, function(exists) {
            return callback(filename, exists);
          });
        };
      })(this));
    };

    Generator.prototype.renderString = function(data, vars) {
      return eco.render(data.toString(), _.extend({}, this.options, vars));
    };

    Generator.prototype.fileHasHeader = function(filename, callback) {
      return fs.readFile(filename, function(err, data) {
        var lines;
        if (err) {
          return callback(err);
        }
        lines = S(data).lines();
        return callback(lines[0] === '---');
      });
    };

    Generator.prototype.parseFileHeader = function(data) {
      var header, line, lines, _i, _len;
      lines = S(data).lines();
      if (lines[0] !== '---') {
        return [false, data];
      }
      lines.shift();
      header = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line === '---') {
          break;
        } else {
          header.push(line);
        }
      }
      data = lines.slice(header.length + 1).join("\n");
      header = header.length > 0 ? yaml.safeLoad(header.join("\n")) : {};
      return [header, data];
    };

    Generator.prototype.render = function(filename, vars, callback) {
      return fs.readFile(filename, (function(_this) {
        return function(err, data) {
          var content, header, _ref;
          if (err) {
            return callback(err);
          }
          _ref = _this.parseFileHeader(data), header = _ref[0], data = _ref[1];
          vars = _.extend({}, vars, header);
          vars["include"] = function(relfilename) {
            return _this.renderString(fs.readFileSync(path.join(path.dirname(filename), relfilename)), vars);
          };
          content = _this.renderString(data, vars);
          if (header.layout) {
            return _this.getThemeFilename(header.layout, function(tplname, exists) {
              if (!exists) {
                return cb("Missing layout: " + tplname);
              }
              return _this.render(tplname, _.extend({}, vars, {
                content: content
              }), callback);
            });
          } else {
            return callback(null, content);
          }
        };
      })(this));
    };

    Generator.prototype.mkdir = function(dir, callback) {
      return fs.exists(dir, (function(_this) {
        return function(exists) {
          if (exists) {
            return callback(null);
          }
          return _this.mkdir(path.dirname(dir), function(err) {
            if (err) {
              return callback(err);
            }
            return fs.mkdir(dir, callback);
          });
        };
      })(this));
    };

    Generator.prototype.copy = function(src, dest, callback) {
      return this.mkdir(path.dirname(dest), function(err) {
        var ins, outs;
        if (err) {
          return callback(err);
        }
        ins = fs.createReadStream(src);
        ins.on('error', callback);
        outs = fs.createWriteStream(dest);
        outs.on('error', callback);
        ins.on('end', callback);
        return ins.pipe(outs);
      });
    };

    Generator.prototype.generateIndex = function(title, manifests, filename, callback) {
      var categories, m, name, vars, _i, _len;
      if (callback == null) {
        callback = null;
      }
      categories = {};
      for (_i = 0, _len = manifests.length; _i < _len; _i++) {
        m = manifests[_i];
        name = m.category || this.options.defaultCategory;
        if (!categories[name]) {
          categories[name] = [];
        }
        categories[name].push(m);
      }
      vars = {
        title: title,
        categories: categories
      };
      return this.getThemeFilename('_manifests.html', (function(_this) {
        return function(tplname, exists) {
          if (!exists) {
            return callback("Missing template: " + tplname);
          }
          return _this.render(tplname, vars, function(err, content) {
            if (err) {
              if (callback) {
                callback(err);
              }
              return;
            }
            return _this.mkdir(path.dirname(filename), function(err) {
              if (err) {
                if (callback) {
                  callback(err);
                }
                return;
              }
              return fs.writeFile(filename, content, callback);
            });
          });
        };
      })(this));
    };

    Generator.prototype.generate = function(manifest, destDir, callback) {
      var allContent, copyStylesheet, copyThemeFiles, renderAll, renderFile, renderFiles, renderHomepage;
      if (callback == null) {
        callback = null;
      }
      allContent = '';
      renderFile = (function(_this) {
        return function(file, filename, cb) {
          var copyAsset, vars;
          copyAsset = function(a, c) {
            return _this.copy(file.makeRelativeUri(a), path.join(destDir, a), c);
          };
          vars = {
            manifest: manifest,
            content: file.html
          };
          return _this.getThemeFilename('_page.html', function(tplname, exists) {
            if (!exists) {
              return cb("Missing template: " + tplname);
            }
            return _this.render(tplname, vars, function(err, content) {
              if (err) {
                return cb(err);
              }
              return fs.writeFile(path.join(destDir, filename + '.html'), content, function(err) {
                if (err) {
                  return cb(err);
                }
                return async.forEach(file.assets, copyAsset, cb);
              });
            });
          });
        };
      })(this);
      renderFiles = (function(_this) {
        return function(cb) {
          var file, i, lock, _ref, _results;
          lock = manifest.files.length;
          _ref = manifest.files;
          _results = [];
          for (i in _ref) {
            file = _ref[i];
            if (manifest.ignoreFirstFileForToc && i === 0) {
              continue;
            }
            allContent += file.html + "\n";
            _results.push(renderFile(file, file.slug, function() {
              if (--lock === 0) {
                return cb();
              }
            }));
          }
          return _results;
        };
      })(this);
      renderHomepage = (function(_this) {
        return function(cb) {
          return renderFile(manifest.files[0], 'index', cb);
        };
      })(this);
      renderAll = (function(_this) {
        return function(cb) {
          return _this.getThemeFilename('_page.html', function(tplname, exists) {
            return _this.render(tplname, {
              manifest: manifest,
              content: allContent
            }, function(err, content) {
              if (err) {
                return cb(err);
              }
              return fs.writeFile(path.join(destDir, 'all.html'), content, cb);
            });
          });
        };
      })(this);
      copyStylesheet = (function(_this) {
        return function(cb) {
          var filename;
          if (manifest.options.css == null) {
            return cb();
          }
          filename = manifest.options.css;
          if (filename.substr(0, 1) !== '/' && !filename.match(/^(https?):\/\//)) {
            return _this.copy(manifest.makeRelativeUri(filename), path.join(destDir, filename), cb);
          } else {
            return cb();
          }
        };
      })(this);
      copyThemeFiles = (function(_this) {
        return function(cb) {
          return _this.getThemeFilename('.', function(srcDir, exists) {
            if (!exists) {
              return cb();
            }
            return _this.copyFiles(srcDir, destDir, _this.options.compileThemeFiles, {
              manifest: manifest
            }, cb);
          });
        };
      })(this);
      return async.series([
        ((function(_this) {
          return function(cb) {
            return _this.mkdir(destDir, cb);
          };
        })(this)), renderHomepage, renderFiles, renderAll, copyStylesheet, copyThemeFiles
      ], function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    Generator.prototype.copyFiles = function(srcDir, destDir, compileFiles, tplVars, callback) {
      var compileFile, copyFile, handleFile, handleFiles;
      if (compileFiles == null) {
        compileFiles = true;
      }
      if (tplVars == null) {
        tplVars = {};
      }
      if (callback == null) {
        callback = null;
      }
      compileFile = (function(_this) {
        return function(data, filename, cb) {
          var target;
          if (compileFiles && path.extname(filename) === '.less') {
            target = path.basename(filename, path.extname(filename)) + '.css';
            return less.render(data.toString(), function(err, output) {
              return cb(err, target, output.css);
            });
          } else if (compileFiles && path.extname(filename) === '.coffee') {
            target = path.basename(filename, path.extname(filename)) + '.js';
            return cb(null, target, coffee.compile(data.toString()));
          } else {
            return cb(null, filename, data);
          }
        };
      })(this);
      copyFile = (function(_this) {
        return function(pathname, filename, cb) {
          return fs.readFile(pathname, function(err, data) {
            if (err) {
              return cb(err);
            }
            return compileFile(data, filename, function(err, filename, content) {
              if (err) {
                return cb(err);
              }
              return fs.writeFile(path.join(destDir, filename), content, cb);
            });
          });
        };
      })(this);
      handleFile = (function(_this) {
        return function(filename, cb) {
          var pathname;
          pathname = path.join(srcDir, filename);
          return fs.stat(pathname, function(err, stat) {
            if (err) {
              return cb(err);
            }
            if (stat.isDirectory()) {
              return _this.mkdir(path.join(destDir, filename), function(err) {
                if (err) {
                  return cb(err);
                }
                return _this.copyFiles(pathname, path.join(destDir, filename), compileFiles, tplVars, cb);
              });
            } else if (!S(filename).startsWith('_')) {
              return _this.fileHasHeader(pathname, function(hasHeader) {
                if (hasHeader) {
                  return _this.render(pathname, tplVars, function(err, content) {
                    return compileFile(content, filename, function(err, filename, content) {
                      if (err) {
                        return cb(err);
                      }
                      return fs.writeFile(path.join(destDir, filename), content, cb);
                    });
                  });
                } else {
                  return copyFile(pathname, filename, cb);
                }
              });
            } else {
              return cb();
            }
          });
        };
      })(this);
      handleFiles = (function(_this) {
        return function(err, files, cb) {
          if (err) {
            return cb(err);
          }
          return async.forEach(files, handleFile, cb);
        };
      })(this);
      return async.series([
        ((function(_this) {
          return function(cb) {
            return _this.mkdir(destDir, cb);
          };
        })(this)), (function(cb) {
          return fs.readdir(srcDir, function(err, files) {
            return handleFiles(err, files, cb);
          });
        })
      ], function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    return Generator;

  })();

  module.exports = Generator;

}).call(this);

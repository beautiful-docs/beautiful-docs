// Generated by CoffeeScript 2.5.1
(function() {
  var Generator, Manifest, async, fs, path;

  Manifest = require('./manifest');

  Generator = require('./generator');

  async = require('async');

  fs = require('fs');

  path = require('path');

  exports.version = '1.0.0';

  exports.Manifest = Manifest;

  exports.Generator = Generator;

  // Creates a Manifest object from a JSON-encoded manifest file

  // filename : The manifest's filename
  // callback : A function that will be called with the Manifest object
  exports.open = function(filename, callback) {
    return Manifest.load(filename, callback);
  };

  // Creates a Manifest object from a directory containing .md files

  // dir       : The directory
  // callback  : A function that will be called with the Manifest object
  exports.createManifestFromDir = function(dir, callback) {
    var m;
    m = new Manifest({
      title: path.basename(dir)
    });
    return fs.readdir(dir, function(err, files) {
      var f, i, len, mdFiles;
      mdFiles = [];
      for (i = 0, len = files.length; i < len; i++) {
        f = files[i];
        if (path.extname(f) === '.md') {
          mdFiles.push(path.join(dir, f));
        }
      }
      return m.addFiles(mdFiles.sort(), function(err) {
        return callback(err, m);
      });
    });
  };

  // Generates all the html files from a Manifest object

  // manifest : The Manifest object
  // destDir  : Where to save the html files
  // options  : An array of options for the generator
  // callback : A function that will be called once all files are generated
  exports.generate = function(manifest, destDir, options = {}, callback = null) {
    var g;
    g = new Generator(options);
    return g.generate(manifest, destDir, callback);
  };

  // Generates an index file for multiple manifests

  // title     : The title of the page
  // manifests : An array of Manifest object
  // filename  : The filename of the index file
  // options   : An object of generator options
  // callback  : A function that will be called once the index is generated
  exports.generateIndex = function(title, manifests, filename, options = {}, callback = null) {
    var g;
    g = new Generator(options);
    return g.generateIndex(title, manifests, filename, callback);
  };

  // Creates an HTTP server that will serve files from dir

  // dir  : The directory where the files to server are located
  // port : The port on which the server should listen to, default: 8080
  exports.serveStaticDir = function(dir, port = 8080) {
    var app, express;
    express = require('express');
    app = express();
    app.configure(() => {
      app.use(express.static(dir));
      return app.use(express.errorHandler({
        dumpExceptions: true,
        showStack: true
      }));
    });
    return app.listen(port);
  };

}).call(this);

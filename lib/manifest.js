// Generated by CoffeeScript 1.9.0
(function() {
  var Manifest, ManifestFile, S, async, extractNameFromUri, fs, makeUriRelativeTo, marked, path, url, _;

  fs = require('fs');

  path = require('path');

  url = require('url');

  marked = require('marked');

  async = require('async');

  _ = require('underscore');

  S = require('string');

  extractNameFromUri = function(filename) {
    return path.basename(filename, path.extname(filename));
  };

  makeUriRelativeTo = function(uri, relativeTo) {
    if (uri.substr(0, 1) === '/') {
      return uri;
    } else {
      return path.join(relativeTo, uri);
    }
  };

  ManifestFile = (function() {
    ManifestFile.load = function(manifest, uri, callback) {
      var f;
      f = new ManifestFile(manifest, uri);
      return f.refresh(function(err) {
        return callback(err, f);
      });
    };

    function ManifestFile(manifest, _at_uri) {
      this.uri = _at_uri;
      this.manifest = manifest;
      this.slug = S(extractNameFromUri(this.uri)).slugify().s;
    }

    ManifestFile.prototype.refresh = function(callback) {
      if (callback == null) {
        callback = null;
      }
      return fs.readFile(this.uri, (function(_this) {
        return function(err, data) {
          if (err) {
            if (callback) {
              callback(err);
            }
            return;
          }
          _this.raw = data.toString();
          _this.render();
          return callback(null);
        };
      })(this));
    };

    ManifestFile.prototype.makeRelativeUri = function(uri) {
      return makeUriRelativeTo(uri, path.dirname(this.uri));
    };

    ManifestFile.prototype.render = function() {
      var content, convertToHtml, html, i, level, mdTitle, next_title_pos, remaining_content, slug, title, titles;
      this.assets = [];
      this.sections = [];
      this.html = '';
      convertToHtml = (function(_this) {
        return function(markdown) {
          var anchor, hTag, hTags, html, img, imgs, new_img, src, title, _i, _j, _len, _len1, _ref, _ref1;
          html = marked(markdown);
          imgs = html.match(/<img[^>]*>/gi);
          _ref = imgs || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            img = _ref[_i];
            src = img.match(/src=("|')([^"']+)\1/i);
            if (src && !src[2].match(/^(https?):\/\//)) {
              if (!_this.manifest.options.makeAssetsRelativeToGithub) {
                _this.assets.push(src[2]);
              } else {
                url = 'https://github.com/' + _this.manifest.options.makeAssetsRelativeToGithub + '/raw/master/' + src[2];
                new_img = img.replace(src[2], url);
                html = html.replace(img, new_img);
              }
            }
          }
          hTags = html.match(/<h([1-6])[^>]*>.+<\/h\1>/gi);
          _ref1 = hTags || [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            hTag = _ref1[_j];
            title = hTag.substring(hTag.indexOf('>') + 1, hTag.lastIndexOf('<'));
            anchor = S(title).stripTags().decodeHTMLEntities().slugify().s;
            html = html.replace(hTag, '<a name="' + anchor + '"></a>' + hTag);
          }
          return html;
        };
      })(this);
      titles = this.raw.match(/^\#+ (.+)$/gm);
      remaining_content = this.raw;
      for (i in titles) {
        mdTitle = titles[i];
        i = parseInt(i);
        title = S(mdTitle).trim().replace(/\#*$/, '').trim().s;
        level = title.indexOf(' ');
        title = S(title).replace(/^\#+/, '').trim().s;
        if (i === 0) {
          this.title = title;
        }
        slug = S(title).replace(/[^\w]+/g, '-').toLowerCase().dasherize().s;
        content = remaining_content.substr(remaining_content.indexOf(mdTitle));
        if (i < titles.length - 1) {
          next_title_pos = content.indexOf(titles[i + 1]);
          content = content.substr(0, next_title_pos);
          remaining_content = remaining_content.substr(next_title_pos);
        }
        html = convertToHtml(content);
        this.html += html;
        this.sections.push({
          slug: slug,
          level: level,
          title: title,
          markdown: content,
          html: html
        });
      }
      console.log(this.sections);
      if (this.sections.length === 0) {
        title = S(extractNameFromUri(this.uri)).humanize().s;
        slug = S(title).slugify().s;
        this.html = convertToHtml(this.raw);
        return this.sections.push({
          slug: slug,
          level: 1,
          title: title,
          markdown: this.raw,
          html: this.html
        });
      }
    };

    return ManifestFile;

  })();

  Manifest = (function() {
    Manifest.load = function(uri, callback) {
      var m;
      m = new Manifest({}, uri);
      return m.refresh(function(err) {
        return callback(err, m);
      });
    };

    function Manifest(options, _at_uri) {
      if (options == null) {
        options = {};
      }
      this.uri = _at_uri != null ? _at_uri : null;
      this.files = [];
      this.setOptions(options);
    }

    Manifest.prototype.setOptions = function(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.title = (_ref = options.title) != null ? _ref : '';
      this.slug = S(this.title).slugify().s;
      this.category = (_ref1 = options.category) != null ? _ref1 : null;
      this.ignoreFirstFileForToc = options.home != null;
      this.maxTocLevel = (_ref2 = options.maxTocLevel) != null ? _ref2 : 2;
      this.makeAssetsRelativeToGithub = (_ref3 = options.makeAssetsRelativeToGithub) != null ? _ref3 : false;
      this.rootDir = (_ref4 = options.rootDir) != null ? _ref4 : '.';
      this.links = (_ref5 = options.links) != null ? _ref5 : [];
      return this.options = _.extend({}, options);
    };

    Manifest.prototype.addFiles = function(files, callback) {
      var d, i, lock, _i, _ref, _results;
      if (callback == null) {
        callback = null;
      }
      lock = files.length;
      d = this.files.length;
      _results = [];
      for (i = _i = 0, _ref = files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function(_this) {
          return function() {
            var j;
            j = d + i;
            return ManifestFile.load(_this, _this.makeRelativeUri(files[i]), function(err, f) {
              if (err) {
                lock = -1;
                if (callback) {
                  callback(err);
                }
                return;
              }
              _this.files[j] = f;
              if (--lock === 0) {
                _this.buildTableOfContent();
                if (callback) {
                  return callback(null);
                }
              }
            });
          };
        })(this)());
      }
      return _results;
    };

    Manifest.prototype.buildTableOfContent = function() {
      var currentLevel, entry, file, i, parentScopes, scope, section, _ref, _results;
      this.tableOfContent = [];
      scope = this.tableOfContent;
      parentScopes = [];
      currentLevel = 0;
      _ref = this.files;
      _results = [];
      for (i in _ref) {
        file = _ref[i];
        if (this.ignoreFirstFileForToc && i === '0') {
          continue;
        }
        _results.push((function() {
          var _i, _len, _ref1, _results1;
          _ref1 = file.sections;
          _results1 = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            section = _ref1[_i];
            if (section.level > this.maxTocLevel) {
              continue;
            }
            if (section.level <= currentLevel) {
              parentScopes = parentScopes.slice(0, parentScopes.length - (currentLevel - section.level));
              scope = parentScopes.pop();
            }
            entry = {
              slug: file.slug,
              title: section.title,
              anchor: section.slug,
              childs: []
            };
            scope.push(entry);
            parentScopes.push(scope);
            scope = entry.childs;
            _results1.push(currentLevel = section.level);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Manifest.prototype.refresh = function(callback) {
      if (callback == null) {
        callback = null;
      }
      if (this.uri) {
        return fs.readFile(this.uri, (function(_this) {
          return function(err, data) {
            var files, options, _ref;
            if (err) {
              return callback(err);
            }
            options = JSON.parse(data.toString());
            files = (_ref = options.files) != null ? _ref : [];
            if (options.home) {
              files.unshift(options.home);
            }
            _this.files = [];
            _this.setOptions(options);
            return _this.addFiles(files, function(err) {
              if (err) {
                return callback(err);
              }
              return _this.refreshFiles(callback);
            });
          };
        })(this));
      } else {
        return this.refreshFiles(callback);
      }
    };

    Manifest.prototype.refreshFiles = function(callback) {
      if (callback == null) {
        callback = null;
      }
      return async.forEach(this.files, (function(f, cb) {
        return f.refresh(cb);
      }), (function(_this) {
        return function(err) {
          if (err) {
            if (err) {
              callback(err);
            }
            return;
          }
          _this.buildTableOfContent();
          if (callback) {
            return callback(null);
          }
        };
      })(this));
    };

    Manifest.prototype.makeRelativeUri = function(uri) {
      if (!this.uri) {
        return uri;
      }
      return makeUriRelativeTo(makeUriRelativeTo(uri, this.rootDir), path.dirname(this.uri));
    };

    Manifest.prototype.watch = function(callback) {
      var f, watcher, _i, _len, _ref, _results;
      watcher = (function(_this) {
        return function(curr, prev) {
          if (curr.mtime > prev.mtime) {
            return _this.refresh(callback);
          }
        };
      })(this);
      if (this.uri) {
        fs.watchFile(this.uri, watcher);
      }
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(fs.watchFile(f.uri, watcher));
      }
      return _results;
    };

    return Manifest;

  })();

  module.exports = Manifest;

}).call(this);
